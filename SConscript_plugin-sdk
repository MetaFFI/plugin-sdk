import SCons.Environment
import SCons.Script
import SCons.Node
import SCons.Node.FS
import glob
import SCons.Script.SConsOptions
import compiler_options
import post_actions
import os
from colorama import Fore
import sys
import platform

from site_scons import ALIAS_CORE, ALIAS_CORE_UNITTESTS

# * Import the parent Environment
env: SCons.Environment.Environment
SCons.Script.Import('env')

# * ---- Fill SDK pathes ----

# Place the file paths in env['sdk_includes']
env['sdk_includes'] = [env.Dir('.').abspath, env.Dir('./utils').abspath, env.Dir('./runtime').abspath, env.Dir('./compiler').abspath]

env['sdk_src_c'] = [os.path.abspath(path) for path in glob.glob('**/*.c', recursive=True)]
env['sdk_src_cpp'] = [os.path.abspath(path) for path in glob.glob('**/*.cpp', recursive=True)]

# Exclude files ending with _test.cpp or _test.c from sdk_src_c and sdk_src_cpp
env['sdk_src_c'] = [file for file in env['sdk_src_c'] if not file.endswith('_test.c')]
env['sdk_src_cpp'] = [file for file in env['sdk_src_cpp'] if not file.endswith('_test.cpp')]

env['sdk_src'] = env['sdk_src_c']
env['sdk_src'].extend(env['sdk_src_cpp'])


# * ---- Plugin SDK Unitests ----	
if 'sdk_tests' in env:
	env_expand_env_test = env.Clone()
	# make sure doctest is installed in conan (using SCons):
	if env_expand_env_test.IsWindows():
		env_expand_env_test.LoadConanPackagesInfo('conanfile.txt', 'SConscript_conandeps_windows')
	elif env_expand_env_test.IsLinux():
		env_expand_env_test.LoadConanPackagesInfo('conanfile.txt', 'SConscript_conandeps_linux')
	else:
		print(f'{Fore.RED}Unsupported platform: {platform.system()}{Fore.RESET}')
		sys.exit(1)

	# utils/expand_env_test.cpp
	expand_env_test: SCons.Node.NodeList = env_expand_env_test.CPPProgram('expand_env_test',
																			'plugin-sdk',
																			['utils/expand_env.cpp', 'utils/expand_env_test.cpp'],
																			[	
																				env_expand_env_test['sdk_includes']
																			])

	env_expand_env_test.AddPostAction(expand_env_test, post_actions.execute_doctest_unitest)

	# runtime/cdts_test.cpp
	env_cdts_test = env.Clone()
	if env_cdts_test.IsWindows():
		env_cdts_test.LoadConanPackagesInfo('conanfile.txt', 'SConscript_conandeps_windows')
	elif env_cdts_test.IsLinux():
		env_cdts_test.LoadConanPackagesInfo('conanfile.txt', 'SConscript_conandeps_linux')
	else:
		print(f'{Fore.RED}Unsupported platform: {platform.system()}{Fore.RESET}')
		sys.exit(1)


	cdts_test: SCons.Node.NodeList = env_cdts_test.CPPProgram('cdts_test',
																'plugin-sdk',
																['runtime/cdt.cpp', 'runtime/cdts_test.cpp', 'runtime/cdts_traverse_construct.cpp'],
																[
																	env_cdts_test['sdk_includes'],
																])

	env_cdts_test.AddPostAction(cdts_test, post_actions.execute_doctest_unitest)

	# Go Tests at "compiler/go/IDL/"
	go_idl_test = env.Clone()
	sdk_go_test = go_idl_test.GoTest(target='go_idl_test_target', path=go_idl_test.Dir('./compiler/go/IDL/').abspath)

	# * ---- Copy SDK includes ----
	if 'install_sdk_includes' in env:
		install_sdk_includes = env.Install(env['METAFFI_HOME']+'/include/', [env.Dir('./runtime').File('cdt.h').abspath,
											env.Dir('./runtime').File('cdts_traverse_construct.h').abspath,
											env.Dir('./runtime').File('metaffi_primitives.h').abspath,
											env.Dir('./runtime').File('xcall.h').abspath,
											env.Dir('./runtime').File('xllr_capi_loader.c').abspath,
											env.Dir('./runtime').File('xllr_capi_loader.h').abspath])
		SCons.Script.Alias(ALIAS_CORE, install_sdk_includes)
		
	# metaffi-core should be the only one that checks the SDK
	SCons.Script.Alias(ALIAS_CORE_UNITTESTS, [expand_env_test, cdts_test, sdk_go_test])