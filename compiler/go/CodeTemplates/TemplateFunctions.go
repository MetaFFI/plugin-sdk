package TemplateFunctions

import (
	"fmt"
	"github.com/MetaFFI/plugin-sdk/compiler/go/IDL"
	"os"
)

var templatesFuncMap = map[string]interface{}{
	"GetCDTReturnValueIndex": getCDTReturnValueIndex,
	"GetCDTParametersIndex":  getCDTParametersIndex,
	"XcallFunctionName":      XCallFunctionName,
	"DoNotEditText":          doNotEditText,
	"Env":                    env,
}

func env(envName string) string{
	res := os.Getenv(envName)
	if res == ""{
		panic("Cannot find Environment variable: "+envName)
	}

	return res
}

//--------------------------------------------------------------------
func getCDTReturnValueIndex(params []*IDL.ArgDefinition, retvals []*IDL.ArgDefinition) int {
	return 1
}

//--------------------------------------------------------------------
func getCDTParametersIndex(params []*IDL.ArgDefinition) int {
	if len(params) > 0 {
		return 0
	} else {
		panic("Both parameters and return values are 0 - parameters should not be used")
	}
}

//--------------------------------------------------------------------
func XCallFunctionName(params []*IDL.ArgDefinition, retvals []*IDL.ArgDefinition) string {
	
	// name of xcall
	if len(params) > 0 && len(retvals) > 0 {
		return "xcall_params_ret"
	} else if len(params) > 0 {
		return "xcall_params_no_ret"
	} else if len(retvals) > 0 {
		return "xcall_no_params_ret"
	} else {
		return "xcall_no_params_no_ret"
	}
}

//--------------------------------------------------------------------
func doNotEditText(singleLineCommentSymbol string) string {
	return fmt.Sprintf("%v Code generated by MetaFFI. DO NOT EDIT.\n%v Host code for {{.IDLFilenameWithExtension}}", singleLineCommentSymbol, singleLineCommentSymbol)
}
